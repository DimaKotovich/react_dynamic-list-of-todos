{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTodos","a","fetch","response","json","getUser","userId","TodoList","loadedTodos","selectUserId","inputQuery","setInputQuery","selectedValue","handleChangeSelect","className","name","type","placeholder","value","onChange","disabled","map","todo","classnames","todoList__item","completed","checked","readOnly","title","onClick","id","CurrentUser","setSelectedUser","useState","user","setUser","fetchUser","useCallback","newUser","useEffect","email","phone","App","todos","setTodos","userSelected","setUserSelected","query","setQuery","setSelectedValue","getRespons","data","handleChangeInput","event","target","filteredTodos","filter","includes","toLowerCase","preparedTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6137538d.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './TodoList.scss';\nimport classnames from 'classnames';\n\ntype Props = {\n  loadedTodos: Todo[];\n  userId: number | null;\n  inputQuery: string;\n  setInputQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  selectUserId: (userId: number) => void;\n  selectedValue: string;\n  handleChangeSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  loadedTodos,\n  userId,\n  selectUserId,\n  inputQuery,\n  setInputQuery,\n  selectedValue,\n  handleChangeSelect,\n}) => {\n  return (\n    <div className=\"todoList\">\n      <h2>Todos:</h2>\n      {loadedTodos ? (\n        <div className=\"todoList__list-container\">\n          <div className=\"todoList__list--search\">\n            <label>\n              <input\n                data-cy=\"filterByTitle\"\n                className=\"todoList__search\"\n                name=\"todoList__search\"\n                type=\"text\"\n                placeholder=\"Search todo\"\n                value={inputQuery}\n                onChange={setInputQuery}\n              />\n            </label>\n            <label>\n              <select\n                className=\"todoList__search\"\n                value={selectedValue}\n                onChange={handleChangeSelect}\n                name=\"todoSelect\"\n              >\n                <option value=\"0\" disabled>\n                  Choose a status of todo\n                </option>\n                <option value=\"all\">All</option>\n                <option value=\"active\">Not completed</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </label>\n          </div>\n\n          <ul\n            className=\"todoList__list\"\n            data-cy=\"listOfTodos\"\n          >\n            {loadedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classnames({\n                  todoList__item: true,\n                  'todoList__item--unchecked': !todo.completed,\n                  'todoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classnames(\n                    'todoList__user-button', 'button',\n                    {\n                      'todoList__user-button--selected': todo.userId === userId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp; #\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  setSelectedUser: (userId: number | null) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, setSelectedUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const fetchUser = useCallback(async () => {\n    const newUser = await getUser(userId);\n\n    setUser(newUser);\n  }, [userId]);\n\n  useEffect(() => {\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n\n          <h3\n            data-cy=\"userName\"\n            className=\"CurrentUser__name\"\n          >\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          {userId && (\n            <button\n              data-cy=\"userButton\"\n              className=\"CurrentUser__button\"\n              type=\"button\"\n              onClick={() => setSelectedUser(0)}\n            >\n              Clear\n            </button>\n          )}\n        </>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [userSelected, setUserSelected] = useState<number | null>(null);\n  const [query, setQuery] = useState('');\n  const [selectedValue, setSelectedValue] = useState('all');\n\n  const getRespons = useCallback(async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    getRespons();\n  }, []);\n\n  const handleChangeInput = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setQuery(event.target.value);\n  }, []);\n\n  const handleChangeSelect = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setSelectedValue(event.target.value);\n    }, [],\n  );\n\n  const preparedTodos = () => {\n    const filteredTodos = todos\n      .filter(todo => todo.title.includes(query.toLowerCase()));\n\n    if (selectedValue === 'active') {\n      return filteredTodos.filter(todo => !todo.completed);\n    }\n\n    if (selectedValue === 'completed') {\n      return filteredTodos.filter(todo => todo.completed);\n    }\n\n    return filteredTodos;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          setInputQuery={handleChangeInput}\n          handleChangeSelect={handleChangeSelect}\n          loadedTodos={preparedTodos()}\n          selectUserId={setUserSelected}\n          userId={userSelected}\n          inputQuery={query}\n          selectedValue={selectedValue}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userSelected ? (\n            <CurrentUser\n              setSelectedUser={setUserSelected}\n              userId={userSelected}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}